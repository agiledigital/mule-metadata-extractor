version: 2
jobs:
  build:
    docker:
      - image: circleci/clojure:lein-2.7.1

    working_directory: ~/repo

    environment:
      LEIN_ROOT: "true"
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      ARCHIVE: AnypointStudio66.tar.gz
      JABBA_HOME: /tmp/.jabba
      GITHUB_USER: agiledigital
      GITHUB_REPO: mule-metadata-extractor
      ANYPOINT_STUDIO_URL: https://mule-studio.s3.amazonaws.com/6.6.1-U1/AnypointStudio-for-linux-64bit-6.6.1-201906072050.tar.gz
      # TODO: Test against Anypoint Studio 7/Mule 4
      # ARCHIVE: AnypointStudio73.tar.gz
      # ANYPOINT_STUDIO_URL: https://mule-studio.s3.amazonaws.com/7.3.5-U5/AnypointStudio-for-linux-64bit-7.3.5-201909031749.tar.gz

    steps:
      - checkout

      - run: sudo apt-get update
      - run: sudo apt-get install build-essential libz-dev

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "project.clj" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: lein deps

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "project.clj" }}

      # Sanity Check
      - run: curl --show-error --fail -o "${ARCHIVE}" "${ANYPOINT_STUDIO_URL}"
      - run: tar -xzf "${ARCHIVE}"
      - run: lein compile
      - run: lein run -- -d "AnypointStudio" -o test/mappings generate-mappings
      - run: lein run -- -d "AnypointStudio" -o test/images extract-images
      - run: lein run -- -d "AnypointStudio" -o test/images apply-light-theme

      # Standalone Jar Build
      - run: lein uberjar

      # Native Image Build
      - run:
          command: |
            # Run in the same shell so that we don't lose environment variables
            echo "Installing Jabba"
            curl -sL https://raw.githubusercontent.com/shyiko/jabba/0.11.2/install.sh | bash
            echo "Initialise Jabba at [${JABBA_HOME}]"
            . "${JABBA_HOME}/jabba.sh"
            echo "Install GraalVM"
            jabba install graalvm@19.2.0
            gu install native-image
            echo "Build Native Image"
            lein native-image

      - run:
          command: |
            PROJECT_VERSION=$(lein project-version)
            mkdir artifacts
            cp target/uberjar/*.jar artifacts/
            cp target/base+system+user+dev+uberjar/mule-metadata-extractor-${PROJECT_VERSION} \
              artifacts/mule-metadata-extractor-linux-amd64-${CIRCLE_TAG:-CIRCLE_BRANCH}

      - store_artifacts:
          path: artifacts

  deploy:
    docker:
      - image: circleci/golang
    working_directory: ~/repo
    steps:
      - checkout
      - run: go get github.com/itchio/gothub
      - run: gothub info -u "${CIRCLE_PROJECT_USERNAME}" -r "${CIRCLE_PROJECT_REPONAME}"
      - run:
          command: |
            gothub release \
              --user "${CIRCLE_PROJECT_USERNAME}" \
              --repo "${CIRCLE_PROJECT_REPONAME}" \
              --tag "${CIRCLE_TAG}" \
              --name "Release ${CIRCLE_TAG}" \
              --description "Automated release of the latest version" \
              --pre-release
      - run:
          command: |
            for file in artifacts/*; do
              gothub upload \
                --user "${CIRCLE_PROJECT_USERNAME}" \
                --repo "${CIRCLE_PROJECT_REPONAME}" \
                --tag "${CIRCLE_TAG}" \
                --name $(basename "$file") \
                --file "${file}"
            done
workflows:
  version: 2
  build-n-deploy:
    jobs:
      - build:
          filters:  # required since `deploy` has tag filters AND requires `build`
            tags:
              only: /.*/
      - deploy:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/